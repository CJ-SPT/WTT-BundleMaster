@inherits LayoutComponentBase
@using WTT_BundleMaster.Components
@using WTT_BundleMaster.Services
@inject ConfigurationService ConfigService
@inject IDialogService DialogService
@inject RemapperService RemapperService
<MudThemeProvider Theme="_theme" IsDarkMode="@ConfigService.Config.DarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />
<MudLayout>
    <!-- App Bar -->
    <MudAppBar Elevation="3" Color="Color.Primary">
        <MudText Typo="Typo.h5" Class="ml-2">WTT-BundleMaster</MudText>
        <MudSpacer />
        <MudText Typo="Typo.body2" Class="mr-4">Unity Bundle CABID/PathID Remap and Replace Tool</MudText>
        <MudSwitch @bind-Value="@ConfigService.Config.DarkMode"
                   Color="Color.Secondary"
                   Label="Dark Mode"/>
        <MudButton @onclick="ShowSettings"
                   Variant="Variant.Text"
                   Color="Color.Inherit"
                   Class="px-3">
            <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-1"/>
            <span>Settings</span>
        </MudButton>
    </MudAppBar>

    <!-- Main Content -->
    <MudMainContent>
        <MudGrid>
            <!-- Left Panel (Main Functionality) -->
            <MudItem xs="12" md="8" Class="pr-2">
                <MudContainer MaxWidth="MaxWidth.False" Class="py-4">
                    <!-- Information Section -->
                    <MudPaper Elevation="1" Class="pa-4 mb-4">
                        <MudText Typo="Typo.h6">About BundleMaster</MudText>
                        <MudText Typo="Typo.body2" Class="mt-2">
                            This is a tool for remapping Unity bundle CAB IDs and PathIDs between different builds.
                            First generate or load an existing remap file, then apply it to modified bundles.
                        </MudText>
                    </MudPaper>

                    <!-- Remap Load Status --> @* Add this section *@
                    @if (RemapperService.IsRemapLoaded)
                    {
                    <MudAlert Severity="Severity.Success"
                              Icon="@Icons.Material.Filled.CheckCircle"
                              Class="mb-3"
                              Elevation="1"
                              Dense>
                        Remap File Loaded!
                    </MudAlert>
                    }

                    <!-- Remap Generator Section -->
                    <MudExpansionPanel
                                       Icon="@Icons.Material.Filled.Build"
                                       Text="Remap File Generation"
                                       Class="mb-4">
                        <PanelContent Class="pa-3">
                            <RemapGenerator/>
                        </PanelContent>
                    </MudExpansionPanel>

                    <!-- Bundle Modifier Section -->
                    <MudExpansionPanel Text="Bundle Processor" Icon="@Icons.Material.Filled.AutoFixHigh" Class="mt-4 mb-4">
                        <PanelContent Class="pa-3">  <!-- Add padding inside panel -->
                            <BundleModifier />
                        </PanelContent>
                    </MudExpansionPanel>
                </MudContainer>
            </MudItem>

            <!-- Right Panel (Logs) -->
            <MudItem xs="12" md="4" Class="pl-2" Style="height: 100%;">
                <MudPaper Elevation="1" Class="ma-4" Style="height: calc(100vh - 150px); overflow: hidden;">
                    <div class="pa-4" style="height: 100%;">
                        <LogDisplay />
                    </div>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudMainContent>
</MudLayout>

@code {
    private MudTheme _theme = new();
    private Action _configChangedHandler;

    protected override async Task OnInitializedAsync()
    {
        _configChangedHandler = () => StateHasChanged();
        ConfigService.OnConfigUpdated += _configChangedHandler;
        await base.OnInitializedAsync();
    }

    private async Task OnDarkModeChanged(bool newValue)
    {
        await ConfigService.UpdateConfigAsync(c => c.DarkMode = newValue);
    }

    public void Dispose()
    {
        RemapperService.OnStateChanged -= HandleRemapStateChanged;
    }
    private bool IsRemapLoaded => RemapperService.IsRemapLoaded;
    private void ClearRemap()
    {
        RemapperService.RemapEntries?.Clear();
        RemapperService.IsRemapLoaded = false;
    }
    protected override void OnInitialized()
    {
        RemapperService.OnStateChanged += HandleRemapStateChanged;
        base.OnInitialized();
    }
    
    private async void HandleRemapStateChanged()
    {
        await InvokeAsync(StateHasChanged);
    }
    

    private void ShowSettings()
    {
        var options = new DialogOptions { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        
        DialogService.Show<SettingsPanel>("Settings", options);
    }
}