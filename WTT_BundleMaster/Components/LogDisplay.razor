@inject LogService LogService
@using System.Collections.Specialized
@implements IDisposable

<MudPaper Class="pa-4" Style="height: 100%; display: flex; flex-direction: column; overflow: auto;">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h6">Activity Log (@LogService.Logs.Count)</MudText>
        <MudButton OnClick="() => LogService.Clear()">Clear</MudButton>
    </div>

    <div style="overflow-y: auto; flex-grow: 1;">
        @foreach (var log in LogService.Logs.Reverse().Take(50))
        {
        <MudText Class="@GetLogClass(log.Level)" Typo="Typo.body2">
            [@log.Timestamp.ToString("HH:mm:ss")] @log.Message
        </MudText>
        }
    </div>
    
</MudPaper>

@code {
    
    private DateTime _lastUpdate = DateTime.MinValue;
    private async void Logs_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
    {
        if ((DateTime.Now - _lastUpdate).TotalMilliseconds < 100) return;
        _lastUpdate = DateTime.Now;
    
        await InvokeAsync(async () => {
            StateHasChanged();
            await Task.Delay(100);
        });
    }
    protected override void OnInitialized()
    {
        LogService.Logs.CollectionChanged += Logs_CollectionChanged;
    }
    
    public void Dispose()
    {
        LogService.Logs.CollectionChanged -= Logs_CollectionChanged;
        GC.SuppressFinalize(this);
    }
    

    private string GetLogClass(string level) => level switch
    {
        "warning" => "text-warning",
        "error" => "text-error",
        _ => "text-info"
    };
}