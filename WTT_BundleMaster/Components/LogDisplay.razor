@inject LogService LogService
@implements IDisposable

<MudPaper Class="pa-4" Style="height: 100%; display: flex; flex-direction: column;">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h6">Activity Log (@_logCount)</MudText>
        <MudButton OnClick="ClearLogs">Clear</MudButton>
    </div>

    <MudTable Items="_displayedLogs" Virtualize="true" Bordered="true">
        <HeaderContent>
            <MudTh>Time</MudTh>
            <MudTh>Message</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Time">@context.Timestamp</MudTd>
            <MudTd DataLabel="Message">@context.Message</MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private IEnumerable<LogEntry> _displayedLogs = Enumerable.Empty<LogEntry>();
    private int _logCount = 0;

    protected override void OnInitialized()
    {
        LogService.LogUpdated += UpdateLogs;
        UpdateLogs(); 
    }

    private void UpdateLogs()
    {
        var logs = LogService.Logs; 
        _displayedLogs = logs.Skip(Math.Max(0, logs.Count - 50)).Reverse(); 

        InvokeAsync(StateHasChanged); 
    }

    private void ClearLogs()
    {
        LogService.Clear(); 
    }

    public void Dispose()
    {
        LogService.LogUpdated -= UpdateLogs; 
        GC.SuppressFinalize(this);
    }
}