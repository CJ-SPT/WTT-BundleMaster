@inject LogService LogService
@implements IDisposable

<MudPaper Class="pa-4" Style="height: 100%; display: flex; flex-direction: column; overflow: auto;">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h6">Activity Log (@LogService.Logs.Count)</MudText>
        <MudButton OnClick="() => LogService.Clear()">Clear</MudButton>
    </div>

    <div style="overflow-y: auto; flex-grow: 1;">
        @foreach (var log in LogService.Logs.Reverse().Take(50))
        {
        <MudText Class="@GetLogClass(log.Level)" Typo="Typo.body2">
            [@log.Timestamp.ToString("HH:mm:ss")] @log.Message
        </MudText>
        }
    </div>

    <MudButton Variant="Variant.Outlined"
               Color="Color.Secondary"
               OnClick="TestLogging"
               Class="mt-2">
        Test Logging
    </MudButton>
</MudPaper>

@code {
    protected override void OnInitialized()
    {
        LogService.Logs.CollectionChanged += Logs_CollectionChanged;
    }

    private async void Logs_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        LogService.Logs.CollectionChanged -= Logs_CollectionChanged;
    }

    private void TestLogging()
    {
        LogService.Log("Manual test log", "warning");
    }

    private string GetLogClass(string level) => level switch
    {
        "warning" => "text-warning",
        "error" => "text-error",
        _ => "text-info"
    };
}