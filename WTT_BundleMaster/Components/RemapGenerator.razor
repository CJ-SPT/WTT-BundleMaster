@inject RemapperService RemapperService
@inject IFileDialogService FileDialogueService
@inject LogService LogService
@inject ConfigurationService ConfigService
@using WTT_BundleMaster.Services
@implements IDisposable
<MudGrid>
    <!-- SDK Path Section -->
    <MudItem xs="12">
        <MudTextField Label="SDK Path"
                      @bind-Value="RemapperService.SdkPath"
                      Variant="Variant.Outlined"
                      ReadOnly
                      Class="mb-2"
                      Tooltip="Location of OLD assets or DEV assets (Broken IDs) │ Could be SDK files or previous game version"/>

        <MudTooltip>
            <ChildContent>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Secondary"
                           FullWidth="true"
                           OnClick="() => RemapperService.PickSdkPath()"
                           StartIcon="@Icons.Material.Filled.Construction"
                           EndIcon="@Icons.Material.Filled.HelpOutline">
                    Browse SDK/Old Version Files
                </MudButton>
            </ChildContent>
            <TooltipContent>
                Select folder containing development AssetBundles/StandaloneWindows<br/>
                OR older version of the game with outdated IDs
            </TooltipContent>
        </MudTooltip>
    </MudItem>
    
    <!-- Output File Section -->
    <MudItem xs="12" Class="mt-4">
        <MudTextField Label="Output File"
                      @bind-Value="RemapperService.OutputPath"
                      Variant="Variant.Outlined"
                      ReadOnly
                      Class="mb-2"/>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   FullWidth="true"
                   OnClick="() => RemapperService.PickOutputPath()"
                   StartIcon="@Icons.Material.Filled.Save">
            Browse Output Path
        </MudButton>
    </MudItem>

    <!-- Action Buttons -->
    <MudItem xs="12" Class="mt-4">
        <MudTooltip Text="@(GenerateDisabledText)" Disabled="@CanGenerate">
            <ChildContent>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Success"
                           Disabled="@(!CanGenerate)"
                           StartIcon="@Icons.Material.Filled.AutoAwesomeMosaic"
                           Class="mr-2"
                           OnClick="() => RemapperService.GenerateRemapAsync()">
                    Generate Remap
                </MudButton>
            </ChildContent>
            <TooltipContent>
                @if (!CanGenerate)
                {
                <span class="text-error">Missing requirements:</span>
                <ul class="pl-3 ma-0">
                    @if (string.IsNullOrEmpty(RemapperService.GamePath)) {
                    <li>• Game path not selected</li>}
                    @if (string.IsNullOrEmpty(RemapperService.SdkPath)) {
                    <li>• SDK path not selected</li>}
                    @if (string.IsNullOrEmpty(RemapperService.OutputPath)) {
                    <li>• Output path not selected</li>}
                </ul>
                }
                else
                {
                @:Click to generate remap file
                }
            </TooltipContent>
        </MudTooltip>

        <MudButton Variant="Variant.Outlined"
                   Color="Color.Secondary"
                   StartIcon="@Icons.Material.Filled.Upload"
                   OnClick="LoadRemap">
            Load Existing
        </MudButton>
    </MudItem>

    <!-- Progress and Logs -->
    @if (RemapperService.IsProcessing)
    {
        <MudItem xs="12" Class="mt-4">
            <MudProgressLinear Color="Color.Info" 
                               Value="@RemapperService.Progress"
                               Class="mb-2"/>
            <MudText>Processing @RemapperService.CurrentFile...</MudText>
        </MudItem>
    }

</MudGrid>

@code {
    private bool CanGenerate => !string.IsNullOrEmpty(RemapperService.GamePath) &&
                               !string.IsNullOrEmpty(RemapperService.SdkPath) &&
                               !string.IsNullOrEmpty(RemapperService.OutputPath);
    private string GenerateDisabledText => !CanGenerate 
        ? "Cannot generate remap - missing required fields" 
        : "Ready to generate remap file";

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.InitializeAsync();
    
        RemapperService.GamePath = ConfigService.Config.LastRemapGamePath;
        RemapperService.SdkPath = ConfigService.Config.LastRemapSdkPath;
        RemapperService.OutputPath = ConfigService.Config.LastRemapOutputPath;

        RemapperService.OnStateChanged += OnServiceStateChanged;
        StateHasChanged();
    }

    private async Task GenerateRemapAsync()
    {
        await RemapperService.GenerateRemapAsync();
        if (!string.IsNullOrEmpty(RemapperService.OutputPath))
        {
            await RemapperService.LoadRemapAsync(RemapperService.OutputPath);
            await HandleLoadComplete();
        }
    }
    
    private async void OnServiceStateChanged()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        RemapperService.OnStateChanged -= OnServiceStateChanged;
    }
    
    private async Task LoadRemap()
    {
        try 
        {
            var path = await FileDialogueService.PickFileAsync("JSON Files|*.json", "Load Remap File");
            if (!string.IsNullOrEmpty(path))
            {
                await RemapperService.LoadRemapAsync(path);
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Log($"Error loading remap file: {ex.Message}", LogLevel.Error);
        }
    }
    private void Log(string message, LogLevel level = LogLevel.Info)
    {
        LogService.Log(message, level);
    }
    
    private async Task HandleLoadComplete()
    {
        if (OnRemapLoaded.HasDelegate)
        {
            await OnRemapLoaded.InvokeAsync();
        }
    }

    [Parameter] public EventCallback OnRemapLoaded { get; set; }
}