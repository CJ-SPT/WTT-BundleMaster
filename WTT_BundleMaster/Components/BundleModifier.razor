@using System.IO
@using WTT_BundleMaster.Services
@inject RemapperService RemapperService
@inject IFileDialogService FileDialog
@inject ReplacerService ReplacerService
@inject ConfigurationService ConfigService

<MudGrid Spacing="2" Justify="Justify.FlexStart">
    <!-- Bundle Folder Section -->
    <MudItem xs="12" Class="mt-4">
        <MudText Typo="Typo.h6" Class="mb-3">Bundle Source</MudText>

        <div class="d-flex flex-column" style="gap: 8px;">
            <MudTooltip>
                <ChildContent>
                    <MudTextField Label="Bundle Folder"
                                  @bind-Value="_bundlePath"
                                  Variant="Variant.Outlined"
                                  ReadOnly
                                  Class="mb-1"
                                  AdornmentIcon="@Icons.Material.Filled.FolderOpen"
                                  AdornmentAriaLabel="Browse"
                                  FullWidth="true"
                                  Style="min-width: 600px; font-size: 0.9rem;"/>
                </ChildContent>
            </MudTooltip>

            <MudTooltip>
                <ChildContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               OnClick="PickBundleFolder"
                               StartIcon="@Icons.Material.Filled.FolderOpen"
                               EndIcon="@Icons.Material.Filled.HelpOutline"
                               Style="min-width: 600px; margin-top: 4px;">
                        Browse Bundle Folder
                    </MudButton>
                </ChildContent>
                <TooltipContent>
                    Select folder containing asset bundles you wish to modify
                </TooltipContent>
            </MudTooltip>
        </div>
    </MudItem>

    <!-- Overwrite Option with Persistent Warning -->
    <MudItem xs="12" Class="mt-2">
        <MudCheckBox @bind-Value="@_overwriteExistingBundles"
                     Label="Overwrite bundles in original location"
                     Color="Color.Secondary"
                     Class="ml-1">
            <LabelContent>
                <MudTooltip Text="Dangerous operation - modifies original files">
                    <MudIcon Icon="@Icons.Material.Filled.Warning"
                             Color="Color.Warning"
                             Class="ml-1"
                             Style="font-size: 1rem; vertical-align: middle;"/>
                </MudTooltip>
            </LabelContent>
        </MudCheckBox>

        @if (_overwriteExistingBundles)
        {
        <MudAlert Severity="Severity.Warning"
                  Icon="@Icons.Material.Filled.Warning"
                  Class="mt-2"
                  Elevation="2"
                  Dense>
            <MudText Class="text-warning">
                <strong>WARNING:</strong> This will permanently overwrite original files!
            </MudText>
            <MudText Class="text-warning" Typo="Typo.body2">
                Uncheck to preserve originals and create modified copies instead.
            </MudText>
        </MudAlert>
        }
    </MudItem>


    <!-- Output Path Section (Conditional) -->
    @if (!_overwriteExistingBundles)
    {
    <MudItem xs="12" Class="mt-4">
        <MudText Typo="Typo.h6" Class="mb-3">Output Location</MudText>

        <div class="d-flex flex-column" style="gap: 8px;">
            <MudTooltip>
                <ChildContent>
                    <MudTextField Label="Output Folder"
                                  @bind-Value="_outputPath"
                                  Variant="Variant.Outlined"
                                  ReadOnly
                                  Class="mb-1"
                                  AdornmentIcon="@Icons.Material.Filled.FolderOpen"
                                  AdornmentAriaLabel="Browse"
                                  FullWidth="true"
                                  Style="min-width: 600px; font-size: 0.9rem;"/>
                </ChildContent>
            </MudTooltip>

            <MudTooltip>
                <ChildContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               OnClick="PickOutputFolder"
                               StartIcon="@Icons.Material.Filled.FolderOpen"
                               EndIcon="@Icons.Material.Filled.HelpOutline"
                               Style="min-width: 600px; margin-top: 4px;">
                        Choose Output Folder
                    </MudButton>
                </ChildContent>
                <TooltipContent>
                    Choose destination for processed bundles<br/>
                    Recommended to use a new empty folder
                </TooltipContent>
            </MudTooltip>
        </div>
    </MudItem>
    }

    <!-- Action Section -->
    <MudItem xs="12" Class="mt-4">
        <MudTooltip Text="@(DisabledTooltipText)" Disabled="@CanProcess">
            <ChildContent>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           FullWidth="true"
                           Disabled="@(!CanProcess)"
                           StartIcon="@Icons.Material.Filled.AutoFixHigh"
                           OnClick="ProcessBundles"
                           Class="mb-2">
                    Process Bundles
                </MudButton>
            </ChildContent>
            <TooltipContent>
                @if (!CanProcess)
                {
                    <span class="text-error">Requirements not met:</span>
                    <ul class="pl-3 ma-0">
                        @if (string.IsNullOrEmpty(_bundlePath)) {
                            <li>• Bundle folder not selected</li>}
                        @if (!RemapperService.IsRemapLoaded)
                        {
                            <li>• Remap File has not been loaded</li>
                        }
                        @if (!_overwriteExistingBundles && string.IsNullOrEmpty(_outputPath)) {
                            <li>• Output folder not selected</li>}
                    </ul>
                }
                else
                {
                    @:Start bundle processing with current configuration
                }
            </TooltipContent>
        </MudTooltip>
    </MudItem>
</MudGrid>

@code {
    private bool _overwriteExistingBundles
    {
        get => ConfigService.Config.Overwrite;
        set
        {
            ConfigService.Config.Overwrite = value;
            _ = ConfigService.UpdateConfigAsync(c => c.Overwrite = value);
        }
    }

    private string _bundlePath;
    private string _outputPath;

    protected override async Task OnInitializedAsync()
    {
        ConfigService.OnConfigUpdated += HandleConfigUpdate;
        await LoadPathsFromConfig();
    }

    private void HandleConfigUpdate()
    {
        _overwriteExistingBundles = ConfigService.Config.Overwrite;
        StateHasChanged();
    }

    public void Dispose()
    {
        ConfigService.OnConfigUpdated -= HandleConfigUpdate;
    }

    private async Task LoadPathsFromConfig()
    {
        _bundlePath = ConfigService.Config.LastBundlePath;
        _outputPath = ConfigService.Config.LastOutputPath;
        await InvokeAsync(StateHasChanged);
    }
    private async Task OnOverwriteChanged(bool newValue)
    {
        await ConfigService.UpdateConfigAsync(c => c.Overwrite = newValue);
        StateHasChanged();
    }
    private string DisabledTooltipText => !CanProcess 
        ? "Please complete all required fields" 
        : "Ready to process bundles";

    private bool CanProcess => 
        !string.IsNullOrEmpty(_bundlePath) && 
        RemapperService.IsRemapLoaded &&
        (_overwriteExistingBundles || !string.IsNullOrEmpty(_outputPath));
    
    protected override void OnInitialized()
    {
        _bundlePath = ConfigService.Config.LastBundlePath;
        RemapperService.OnStateChanged += OnServiceStateChanged;
    }

    private async void OnServiceStateChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task PickBundleFolder()
    {
        _bundlePath = await FileDialog.PickDirectoryAsync("Select Bundle Folder");
        StateHasChanged();
        await ConfigService.UpdateConfigAsync(c => c.LastBundlePath = _bundlePath);
    }

    private async Task PickOutputFolder()
    {
        _outputPath = await FileDialog.PickDirectoryAsync("Select Output Folder");
        StateHasChanged();
        await ConfigService.UpdateConfigAsync(c => c.LastOutputPath = _outputPath);
    }

    private async Task ProcessBundles()
    {
        if (!Directory.Exists(_bundlePath))
        {
            RemapperService.Log("Invalid bundle directory", "error");
            return;
        }

        var finalOutputPath = _overwriteExistingBundles 
            ? _bundlePath 
            : _outputPath;

        if (!Directory.Exists(finalOutputPath))
        {
            Directory.CreateDirectory(finalOutputPath);
        }

        try
        {
            await ReplacerService.ProcessBundlesAsync(
                _bundlePath,
                finalOutputPath,
                RemapperService.RemapEntries
            );
            RemapperService.Log("Bundle processing completed successfully!", "success");
        }
        catch (Exception ex)
        {
            RemapperService.Log($"Error processing bundles: {ex.Message}", "error");
        }
    }
}