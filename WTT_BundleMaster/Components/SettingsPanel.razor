@using System.Text.Json
@using WTT_BundleMaster.Services
@inject ConfigurationService ConfigService
@inject RemapperService RemapperService
@inject LogService LogService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Application Settings</MudText>
    </TitleContent>

    <DialogContent>
        <MudPaper Elevation="0" Class="@PaperClass">
            <MudCheckBox @bind-Value="LoadLastRemapOnStart"
                         Label="Load Default Remap on Application Start (2019-2022 Remap File)"
                         Class="@CheckboxClass"/>

            <MudCheckBox @bind-Value="CompressBundles"
                         Label="Compress Bundles On Build (LZMA)"
                         Class="@CheckboxClass"/>
        </MudPaper>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Close" Color="Color.Secondary">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private const string CheckboxClass = "mb-3";
    private const string PaperClass = "pa-4";

    private bool _loadLastRemapBacking;
    private bool _compressBundlesBacking;

    public bool LoadLastRemapOnStart
    {
        get => _loadLastRemapBacking;
        set => SetAndUpdate(ref _loadLastRemapBacking, value, UpdateLoadLastRemapAsync);
    }

    public bool CompressBundles
    {
        get => _compressBundlesBacking;
        set => SetAndUpdate(ref _compressBundlesBacking, value, UpdateCompressBundlesAsync);
    }

    protected override void OnInitialized()
    {
        (_loadLastRemapBacking, _compressBundlesBacking) =
            (ConfigService.Config.LoadLastRemapOnStart, ConfigService.Config.CompressBundles);
    }

    private async Task UpdateCompressBundlesAsync(bool newValue)
    {
        ConfigService.Config.CompressBundles = newValue;
        await ConfigService.SaveConfigurationAsync();
        Snackbar.Add("Compression setting updated", Severity.Success);
        StateHasChanged();
    }

    private async Task UpdateLoadLastRemapAsync(bool newValue)
    {
        ConfigService.Config.LoadLastRemapOnStart = newValue;

        if (newValue)
        {
            await RemapperService.LoadDefaultRemapAsync();
            StateHasChanged();
        }

        await ConfigService.SaveConfigurationAsync();
        Snackbar.Add("Settings updated", Severity.Success);
        StateHasChanged();
    }

    private void SetAndUpdate<T>(ref T backingField, T newValue, Func<T, Task> updateFunc)
    {
        if (EqualityComparer<T>.Default.Equals(backingField, newValue)) return;

        backingField = newValue;
        _ = updateFunc(newValue);
    }

    private void Close() => MudDialog.Close();
}