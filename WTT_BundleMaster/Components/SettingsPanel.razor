@using System.Text.Json
@using WTT_BundleMaster.Services
@inject ConfigurationService ConfigService
@inject RemapperService RemapperService
@inject LogService LogService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Application Settings</MudText>
    </TitleContent>

    <DialogContent>
        <MudPaper Elevation="0" Class="pa-4">
            <!-- Bind directly to the property -->
            <MudCheckBox @bind-Value="LoadLastRemapOnStart"
                         Label="Load Default Remap on Application Start (2019-2022 Remap File)"
                         Class="mb-3"/>

            <MudCheckBox @bind-Value="CompressBundles"
                         Label="Compress Bundles On Build (LZMA)"
                         Class="mb-3"/>
        </MudPaper>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Close" Color="Color.Secondary">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
[CascadingParameter] MudDialogInstance MudDialog { get; set; }

private bool _loadLastRemapBacking;

public bool LoadLastRemapOnStart
{
get => _loadLastRemapBacking;
set
{
if (_loadLastRemapBacking == value)
return;

_loadLastRemapBacking = value;
_ = UpdateLoadLastRemapAsync(value);
}
}

private bool _compressBundlesBacking;

public bool CompressBundles
{
    get => _compressBundlesBacking;
    set
    {
        if (_compressBundlesBacking == value)
            return;

        _compressBundlesBacking = value;
        _ = UpdateCompressBundlesAsync(value);
    }
}

protected override void OnInitialized()
{
    _loadLastRemapBacking = ConfigService.Config.LoadLastRemapOnStart;
    _compressBundlesBacking = ConfigService.Config.CompressBundles;
}

private async Task UpdateCompressBundlesAsync(bool newValue)
{
    ConfigService.Config.CompressBundles = newValue;
        
    _ = Task.Run(async () => 
    {
        await ConfigService.SaveConfigurationAsync();
        await InvokeAsync(() => Snackbar.Add("Compression setting updated", Severity.Success));
    });
        
    StateHasChanged();
}

private async Task UpdateLoadLastRemapAsync(bool newValue)
{
    ConfigService.Config.LoadLastRemapOnStart = newValue;
    
    if (newValue)
    {
        _ = Task.Run(async () => 
        {
            await RemapperService.LoadDefaultRemapAsync();
            await InvokeAsync(StateHasChanged);
        });
    }
    
    _ = Task.Run(async () => 
    {
        await ConfigService.SaveConfigurationAsync();
        await InvokeAsync(() => Snackbar.Add("Settings updated", Severity.Success));
    });
    
    StateHasChanged();
}

private void Close() => MudDialog.Close();
}
