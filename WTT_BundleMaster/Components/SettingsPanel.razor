@using WTT_BundleMaster.Services
@inject ConfigurationService ConfigService
@inject RemapperService RemapperService
@inject LogService LogService
@inject IFileDialogService FileDialogService
@inject ISnackbar Snackbar

<MudDialog OnBackdropClick="OnClose">
    <TitleContent>
        <MudText Typo="Typo.h6">Application Settings</MudText>
    </TitleContent>

    <DialogContent>
        <MudStack Elevation="0" Class="@PaperClass">
            <MudCheckBox @bind-Value="LoadLastRemapOnStart"
                         Label="Load Default Remap on Application Start (2019-2022 Remap File)"
                         Class="@CheckboxClass"/>

            <MudCheckBox @bind-Value="CompressBundles"
                         Label="Compress Bundles On Build (LZMA)"
                         Class="@CheckboxClass"/>
            
            <MudText>Logging Level</MudText>
            
            <MudSlider
                TickMarks="true"
                TickMarkLabels="@_logLevels"
                Min="0"
                Max="_logLevels.Length - 1"
                Step="1"
                Value="SelectedLoggingLevel"
                ValueChanged="@((int val) => OnLoggingLevelChanged(val))"/>
            
            <MudFlexBreak/>
            
            <MudTextField Label="Game Path"
                          @bind-Value="ConfigService.Config.GamePath"
                          Variant="Variant.Outlined"
                          Class="mb-2"
                          ReadOnly="true"
                          Tooltip="Location of CURRENT game build (Valid CAB/Path IDs) │ Typically: {your_game_path_data_folder}/StreamingAssets/Windows"/>
            
            <MudTooltip>
                <ChildContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               OnClick="PickGamePath"
                               StartIcon="@Icons.Material.Filled.FolderOpen"
                               EndIcon="@Icons.Material.Filled.HelpOutline">
                        Browse Current Game Files
                    </MudButton>
                </ChildContent>
                <TooltipContent>
                    Location of CURRENT game build (Valid CAB/Path IDs)<br/>
                    Typically: {your_game_path_data_folder}/StreamingAssets/Windows
                </TooltipContent>
            </MudTooltip>
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="OnClose" Color="Color.Secondary">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private const string CheckboxClass = "mb-3";
    private const string PaperClass = "pa-4";

    private bool _loadLastRemapBacking;
    private bool _compressBundlesBacking;
    private int _selectedLogLevel;
    
    private readonly string[] _logLevels = [ 
        nameof(LogLevel.None), 
        nameof(LogLevel.Error),
        nameof(LogLevel.Success),
        nameof(LogLevel.Warning),
        nameof(LogLevel.Info),
        nameof(LogLevel.Debug),
    ];
    
    public bool LoadLastRemapOnStart
    {
        get => _loadLastRemapBacking;
        set => SetAndUpdate(ref _loadLastRemapBacking, value, UpdateLoadLastRemapAsync);
    }

    public bool CompressBundles
    {
        get => _compressBundlesBacking;
        set => SetAndUpdate(ref _compressBundlesBacking, value, UpdateCompressBundlesAsync);
    }

    public int SelectedLoggingLevel => (int)ConfigService.Config.LogLevel;

    protected override void OnInitialized()
    {
        (_loadLastRemapBacking, _compressBundlesBacking) =
            (ConfigService.Config.LoadLastRemapOnStart, ConfigService.Config.CompressBundles);
    }

    private async Task UpdateCompressBundlesAsync(bool newValue)
    {
        ConfigService.Config.CompressBundles = newValue;
        await ConfigService.SaveConfigurationAsync();
        Snackbar.Add("Compression setting updated", Severity.Success);
        StateHasChanged();
    }

    private async Task UpdateLoadLastRemapAsync(bool newValue)
    {
        ConfigService.Config.LoadLastRemapOnStart = newValue;

        if (!newValue) return;
        
        await RemapperService.LoadDefaultRemapAsync();
        StateHasChanged();
    }

    private void OnLoggingLevelChanged(int newValue)
    {
        _selectedLogLevel = newValue;
        ConfigService.Config.LogLevel = (LogLevel)newValue;
        StateHasChanged();
    }
    
    private void SetAndUpdate<T>(ref T backingField, T newValue, Func<T, Task> updateFunc)
    {
        if (EqualityComparer<T>.Default.Equals(backingField, newValue)) return;

        backingField = newValue;
        _ = updateFunc(newValue);
    }
    
    public async Task PickGamePath()
    {
        var newPath = await FileDialogService.PickDirectoryAsync("Select Game Path");
        if (!string.IsNullOrEmpty(newPath))
        {
            ConfigService.Config.GamePath = newPath; 
            await ConfigService.UpdateConfigAsync(c => c.LastRemapGamePath = newPath);

            StateHasChanged();
        }
    }
    
    private void OnClose()
    {
        // Don't await this here, it causes a delay in the dialog closing.
        ConfigService.SaveConfigurationAsync();
        Snackbar.Add("Settings Updated", Severity.Success);
        StateHasChanged();
        MudDialog.Close();
    }
}